# -*- coding: utf-8 -*-
"""
Created on Sun Jan 15 12:25:50 2012

@author: shawn
"""

1/15/2012 
    redefining the tiling structure. 
    A class TILE will now be
        subclass of NodePath
        One HM with NxM texture maps offset on the HM appropriately
            HM will be generated once and updated as LOD mesh        
            texture maps will be loaded in background
        A list of static objects
            the list can be updated for changes in things like tree states, resources etc
            updates will come from the server (mostly)
            
        A list of NPCs on the tile
            NPC's can be added,transfered to another tile, or deleted
            *** THIS IMPLIES COMM's BETWEEN TILES?

# I think this amounts to the following work
        Create the class TILE()
        TILE() is a munge of terrainManager, objectManager, and a non existent
            NPC manager
        ** a TILE is a chunk of map that is "in scope" for rendering and updating
        for the client ***

        *** TILEs on the server side will naturally fit into parallel processes
                tiles on server side need to interact, client side is only receiver of 
                state of tile on server side
==================================================================
1/18
* 1 Tile, static objects

DB: definitions
a Map
|- terrain geom
|- ter Tex
|- stat obj dict {ID:object}

ID: split into high/low half (byte,word, whatever size you want). 
high = object type (for AI or anything else?)
low = object number (on that tile)

SERVERSIDE(1 tile per cpu, say)
    
Tile Object
|- *mapID
|- dynObject dict {ID:object}
|- *NetClient List (connections)

-methods:
    |- *listen for clients
    |- *drop dead client connections
    |- process client msgs
    |- send dynObject update(s) to client(s)
    |- import object (to another tile-called private)
    |- export object (from another tile-called public)


dynObject
|- inherit NodePath: Pos,Hpr,Quat,...
|- objectID (database ID for client to use)
|-methods:
    |- makeAI change (timestamp:pos,hpr,speed,action...):
    |- interpolate pos (task)
    |- sync commands(input is server command update)
        (recalc the current pos from server info)

 /---------------
/ 

CLIENTSIDE
   |- Client Tile (currently "World")
        (Nodepath, NetClient: each tile talks to a tileserver...makes sense)
        |- global POS,HPR,setc
        |- mapID (look up geom,texture, stat objects)
        |- dyn objects list 
        methods:
        |- connect to tileServer 
            |- * and reconnect
        |- listen for server msg's
        |- *ask server for "my map ID"
            |- time out after interval
        |- loadMap (on receipt of server mapID)
        |- *update dynObj pos buffer(from incoming server update)

        

|- a tileMgr later...
=====================================================================
1/19

 from 1/18:: Client Tile (currently "World") is not entirely correct
    World controls the camera, inputs, the rendering options, it is more the "engine"   
    based code